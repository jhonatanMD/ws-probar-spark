AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template For Java Lambda SuperApp
Parameters:
  Environment:
    Type: String
  Name:
    Type: String
  Version:
    Type: String
  SearchNeptuneConfig:
    Type: String
  RsNeptuneConfig:
    Type: String
Mappings:
  Configuration:
    dev:
      CodeDeployRole: DevOpsCodeDeploy
      CodeDeployType: CodeDeployDefault.LambdaAllAtOnce
      MemorySize: 1024
      Timeout: 90
      LambdaSecurityGroupIds: #Sólo se modifica el valor si se requiere un security group diferente al genérico
        - sg-05c86e8e44295ad71
      LambdaSubnetIds: #Sólo se modifica el valor si se requieren subnets diferentes a las genéricas
        - subnet-04b24ff3586102268
        - subnet-0d5a8c2d883e48fe1
        - subnet-0ceda7323d80e9fe3
    qa:
      CodeDeployRole: DevOpsCodeDeploy
      CodeDeployType: CodeDeployDefault.LambdaAllAtOnce
      MemorySize: 1024
      Timeout: 90
      LambdaSecurityGroupIds: #Sólo se modifica el valor si se requiere un security group diferente al genérico
        - sg-0561ed8f8a08ff271
      LambdaSubnetIds: #Sólo se modifica el valor si se requieren subnets diferentes a las genéricas
        - subnet-09d0c221181e96cb0
        - subnet-0ac360237c6160945
        - subnet-02a5297f4804c1aef
        - subnet-05974f2c077a91d09
    prod:
      CodeDeployRole: DevOpsCodeDeploy
      CodeDeployType: CodeDeployDefault.LambdaAllAtOnce
      MemorySize: 1024
      Timeout: 90
      LambdaSecurityGroupIds: #Sólo se modifica el valor si se requiere un security group diferente al genérico
        - sg-0c42e4e068e697d8a
      LambdaSubnetIds: #Sólo se modifica el valor si se requieren subnets diferentes a las genéricas
        - subnet-0f149ba31295a6bcc
        - subnet-0f400721056e35643
        - subnet-0f032ffb0afaf0bde
        - subnet-0ffb48440f1bdd8cb
  Layers:
    dev:
      Microservice: "superapp-core-microservice:1"
      RedSocial: "superapp-core-redsocial:16"
      Neptune: "superapp-core-neptune:2"
    qa:
      Microservice: "superapp-core-microservice:1"
      RedSocial: "superapp-core-redsocial:2"
      Neptune: "superapp-core-neptune:2"
    prod:
      Microservice: "superapp-core-microservice:1"
      RedSocial: "superapp-core-redsocial:16"
      Neptune: "superapp-core-neptune:2"
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: !Sub
        - "Role for lambda ${Name}"
        - {Name: !Ref Name}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Path: /devops/
      Policies:
        - PolicyName: !Ref Name
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:InvokeFunction'
                Resource: !Sub
                  - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Name}'
                  - { Name: !Ref Name }
      RoleName: !Ref Name
      Tags:
        - Key: "Type"
          Value: "devops"
  LambdaAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: LambdaFunction
    Properties:
      AlarmName: !Ref Name
      AlarmDescription: Alarma de pruebas
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Maximum
      Period: '60'
      EvaluationPeriods: '1'
      Threshold: '1'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Name
          Value:
            Ref: LambdaFunction
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref Name
      CodeUri: dist
      Handler: redsocial.multimedia.infraestructure.handler.Handler::handleRequest
      Runtime: java11
      MemorySize: !FindInMap [ Configuration, !Ref Environment, MemorySize ]
      Timeout: !FindInMap [ Configuration, !Ref Environment, Timeout ]
      Description: !Sub
        - "Release Version ${Version}"
        - { Version: !Ref Version }
      Layers:
        - !Sub
          - "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:${Layer}"
          - { Layer: !FindInMap [ Layers, !Ref Environment, Microservice ] }
        - !Sub
          - "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:${Layer}"
          - { Layer: !FindInMap [ Layers, !Ref Environment, Neptune ] }
        - !Sub
          - "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:${Layer}"
          - { Layer: !FindInMap [ Layers, !Ref Environment, RedSocial ] }
      Environment:
        Variables:
          APP_NAME: !Ref Name
          APP_ENVIRONMENT: !Ref Environment
          APP_VERSION: !Ref Version
          SearchNeptuneConfig: !Ref SearchNeptuneConfig
          RsNeptuneConfig: !Ref RsNeptuneConfig
      AutoPublishAlias: live
      Role: !Sub
        - "arn:aws:iam::${AWS::AccountId}:role/devops/${LambdaRole}"
        - { LambdaRole: !Ref LambdaRole }
      DeploymentPreference:
        Role: !Sub
          - "arn:aws:iam::${AWS::AccountId}:role/service-role/${CodeDeployRole}"
          - { CodeDeployRole: !FindInMap [ Configuration, !Ref Environment, CodeDeployRole ] }
        Type: !FindInMap [ Configuration, !Ref Environment, CodeDeployType ]
      VpcConfig:
        SecurityGroupIds: !FindInMap [ Configuration, !Ref Environment, LambdaSecurityGroupIds ] #No modificar
        SubnetIds: !FindInMap [ Configuration, !Ref Environment, LambdaSubnetIds ] #No modificar